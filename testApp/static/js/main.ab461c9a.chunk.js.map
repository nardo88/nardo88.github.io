{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","loader.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","checked","type","id","title","onClick","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","Modal","state","isOpen","Fragment","setState","this","Component","AddTodo","lazy","Promise","resolve","setTimeout","App","useState","setTodos","loading","setLoading","useEffect","fetch","then","response","json","Provider","value","filter","Suspense","fallback","onCreate","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab461c9a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Context from '../context'\r\n\r\nconst styles = {\r\n\tli:{\r\n\t\tdisplay: 'flex',\r\n\t\tjustifyContent: 'space-between',\r\n\t\talignItems: 'center',\r\n\t\tpadding: '.5rem 1rem',\r\n\t\tborder: '1px solid #ccc',\r\n\t\tborderRadius: '4px',\r\n\t\tmarginBottom: '.5rem'\r\n\t},\r\n\tinput: {\r\n\t\tmarginRight: '1rem'\r\n\t}\r\n}\r\n\r\nfunction TodoItem({todo, index, onChange}) {\r\n\r\n\tconst { removeTodo } = useContext(Context)\r\n\r\n\tconst classes = []\r\n\r\n\tif (todo.completed){\r\n\t\tclasses.push('done')\r\n\t\t\r\n\t}\r\n\r\n\treturn (\r\n\t\t\t<li style = {styles.li}>\r\n\t\t\t<span className = {classes.join(' ')}>\r\n\t\t\t\t<input \r\n\t\t\t\t\tchecked = {todo.completed}\r\n\t\t\t\t\ttype=\"checkbox\" \r\n\t\t\t\t\tstyle = {styles.input}\r\n\t\t\t\t\tonChange = {() => onChange(todo.id)}\r\n\t\t\t\t\t/>\r\n\t\t\t\t<strong>{index + 1}</strong>\r\n\t\t\t\t&nbsp;\r\n\t\t\t\t{todo.title}\r\n\t\t\t</span>\r\n\t\t\t <button className = 'rm' onClick = {() => removeTodo(todo.id)}>&times;</button>\r\n\t\t\t </li>\r\n\t\t)\r\n}\r\n\r\nTodoItem.propTypes = {\r\n\ttodo: PropTypes.object.isRequired,\r\n\tindex: PropTypes.number.isRequired,\r\n\tonChange: PropTypes.func.isRequired\r\n\t\r\n}\r\n\r\nexport default TodoItem","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst styles = {\r\n\tul: {\r\n\t\tlistStyle: 'none',\r\n\t\tmargin: 0,\r\n\t\tpadding: 0\r\n\t}\r\n}\r\n\r\n\r\nfunction TodoList(props) {\r\n\treturn (\r\n\r\n\t<ul style = {styles.ul}>\r\n\t\t{props.todos.map((todo, index) =>{\r\n\t\t\treturn <TodoItem \r\n\t\t\t\ttodo = {todo} \r\n\t\t\t\tkey = {todo.id} \r\n\t\t\t\tindex = {index} \r\n\t\t\t\tonChange = {props.onToggle} />\r\n\t\t})}\r\n\r\n\t</ul>\r\n\t)\r\n}\r\n\r\nTodoList.propTypes = {\r\n\ttodos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\tonToggle: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList","import React from 'react'\r\n\r\nexport default () => <div style = {{display: 'flex', justifyContent: 'center', margin: '.rem'}}><div className=\"lds-dual-ring\"></div></div>","import React from 'react'\r\nimport './Modal.css'\r\n\r\nexport default class Modal extends React.Component{\r\n\t\r\n\tstate = {\r\n\t\tisOpen: false\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<button onClick = {() => this.setState({isOpen: true})}>Open Modal</button>\r\n\r\n\r\n\t\t\t\t{this.state.isOpen && (<div className=\"modal\">\r\n\t\t\t\t\t<div className=\"modal-body\">\r\n\t\t\t\t\t<h1>Modal title</h1>\r\n\t\t\t\t\t<p>I am awesome modal!</p>\r\n\t\t\t\t\t<button onClick = {() => this.setState({isOpen: false})}>Close modal</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t)}\r\n\t\t\t\t\r\n\t\t\t</React.Fragment>\r\n\r\n\t\t)\r\n\t}\r\n}","import React, {useEffect} from 'react';\nimport TodoList from './Todo/TodoList';\nimport Context from './context'\nimport Loader from './loader'\nimport Modal from './Modal/Modal'\n\n\nconst AddTodo = React.lazy(() => new Promise(resolve => {\n\tsetTimeout(()=> {\n\t\tresolve(import('./AddTodo'))\n\t}, 3000)\n}))\n\nfunction App() {\n\n\tlet [todos, setTodos] = React.useState([])\n\n\tconst [loading, setLoading] = React.useState(true)\n\n\tuseEffect(() => {\n\t\tfetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n  \t\t\t.then(response => response.json())\n  \t\t\t.then(todos => {\n  \t\t\t\tsetTimeout(() => {\n  \t\t\t\t\tsetTodos(todos)\n  \t\t\t\t\tsetLoading(false)\n  \t\t\t\t}, 2000)\n  \t\t\t})\n\t}, [])\n\t\n\n\tfunction toggleTodo(id) {\n\t\tsetTodos(todos = todos.map((todo)=>{\n\t\t\tif (todo.id === id) {\n\t\t\t\ttodo.completed = !todo.completed\n\t\t\t}\n\n\t\t\treturn todo\n\n\n\t\t})\n\t\t)\n\n\t}\n\n\tfunction removeTodo(id) {\n\t\tsetTodos(todos.filter(todo => todo.id !== id))\n\t}\n\n\tfunction addTodo(title) {\n\t\tsetTodos(todos.concat([\n\t\t\t{\t\n\t\t\t\ttitle,\n\t\t\t\tid: Date.now(),\n\t\t\t\tcompleted: false\n\t\t\t}\n\t\t])\n\t  )\n\t}\n\n  return (\n\n  \t<Context.Provider value = {{removeTodo: removeTodo}}>\n  \t\t<div className=\"wrapper\">\n \t\t\t<h1>React tutorial</h1>\n\t\t\t<Modal />\n\n \t\t\t<React.Suspense fallback = { <p>Loading....</p> }>\n\t\t\t\t<AddTodo onCreate = {addTodo} />\n \t\t\t</React.Suspense>\n\n\t\t\t{loading && <Loader />}\n\t\t\t{\n\t\t\t\ttodos.length ?\n\t\t\t\t(  <TodoList todos = {todos} onToggle = {toggleTodo} /> ) \n\t\t\t\t :\n\t\t\t\t(  loading ? null : <p>No Todos</p> )\n\t\t\t}\n\n  \t\t</div>\n  \t</Context.Provider>\n\n  \t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}